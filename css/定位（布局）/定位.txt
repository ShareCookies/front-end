https://www.cnblogs.com/tim-li/archive/2012/07/09/2582618.html

CSS中的布局方式有以下几种：
	文档流(静态定位)，相对定位，绝对定位，固定，浮动，流式布局
文档流(静态定位)：（默认）
	介绍：
		，块级元素从上至下、行内元素在每行中从左至右的顺序依次排放元素


		html默认的布局机制就是用文档流模型的，将窗体自上而下分成一行一行,即块元素（block）独占一行，内联元素（inline）不独占一行。
			附块级元素从上至下、行内元素在每行中从左至右的顺序依次排放元素
		附：内联元素后跟内联元素不会另起一行。

	写法：
		position:static;//静态定位，是默认值，无需书写。元素出现在正常的流中（忽略 top, bottom, left, right 和 z-index 声明）。
	例：
		https://www.cnblogs.com/tim-li/archive/2012/07/09/2582618.html
	注：
		脱离文档流：
			元素从普通的布局排版中拿走，其他盒子在定位的时候，会当做脱离文档流的元素不存在而进行排列。
相对定位：
	介绍:
		相对定位就应该是相对元素自己本身原来的位置来定位。
			由于相对定位并没有脱离文档流，所以元素本身所占的位置会保留。
	写法：
		position:relative;//配合left right top bottom进行定位后，元素会根据原来的位置进行移动。
		//可通过z-index进行层次分级。
	例：
		https://www.cnblogs.com/tim-li/archive/2012/07/09/2582618.html
绝对定位：
	介绍:
		根据第一个非static的position元素进行定位。
			绝对定位是脱离文档流的，所以重新定位后元素是不会占着原来的位置的。
	写法：
		position:absolute;
		//通过top,bottom,left,right 可相对于原先位置进行移动。可通过z-index进行层次分级。　
	特性：
		包裹性：
		破坏性：
			absolute绝对定位不仅让高度塌陷，在凡间没有他的实体位置，所以宽度也是塌陷的。
固定：
	介绍：
		生成固定位置的元素，相对于浏览器窗口进行定位。
	写法：
		position:fixed;
		//通过 "left", "top", "right" 以及 "bottom" 可相对于窗口进行移动。
	附：
		两个fixed元素重叠，可通过z-index决定那个显示
浮动：
	https://www.zhangxinxu.com/wordpress/2010/12/css-%E7%9B%B8%E5%AF%B9%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/
	介绍：
		CSS 中，任何元素都可以浮动。
			脱离文档流
		浮动相对于浮动定位吗？
			注：假如在一行之上只有极少的空间可供浮动元素，那么这个元素会跳至下一行，这个过程会持续到某一行拥有足够的空间为止。
		注：
			浮动元素会生成一个块级框，而不论它本身是何种元素。
			块级元素设置浮动后，会影响紧邻它后面的那一个元素。
				https://blog.csdn.net/Crystal_wxj/article/details/55800134
				1.块级元素（ul）和是纵向排列，行级元素（img）都是横向排列。
				float属性能够使纵向排列的块级元素横向排列。
				但是同时可能会影响设置float属性的元素下一个元素的位置，
				这时只要在对下一个CSS设置clear：both或者overflow：hidden。
				就可以消除这种影响。
				2.父标签没有设置浮动，而子标签设置浮动后也可能会影响到父标签，
				这时clear：both不起作用，要用overflow：hidden来消除影响。
	写法：
		float: right | left | none | inherit;
			none：设置对象不浮动。默认值。
			left：设置对象浮在左边
			right：设置对象浮在右边
			inherit：规定应该从父元素继承 float 属性的值。

	特性：
		包裹性：
			包裹性会让元素inline-block化，
			例如一个div标签默认宽度是100%显示的，
			但是一旦用上absolute属性，则100%默认宽度就会变成自适应内部元素的宽度。
		破坏性：
			浮动的破坏性在于切断linebox链，致使高度塌陷。
			但浮动元素占据的实体位置还是在的。
			注：可用padding:20px;来弥补元素高度坍塌
	例：
		1.全部向左浮动会自动排成一行在换行
			https://www.w3cschool.cn/tryrun/showhtml/trycss_float_elements

小知识点：
	margin-top：-100px;
		向上移100px，且会去掉元素上边距
	div根据内容自适应宽高：
		display:inline-block;
			起作用条件（一些案例）：
				好似都行。失效原因可能有：子元素宽高超过父级宽高！
	流动性布局：
		强调不定宽，不定高，活用标签自身属性。
		使用绝对定位大大降低了页面的扩展性和维护性。
附：
	margin 布局？
	...:
		https://www.jianshu.com/p/47147ace6086
		文档流是相对于盒子模型讲的
		文本流是相对于文子段落讲的

	盒子模型：
		https://blog.csdn.net/qq_27127385/article/details/106185712?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase
		介绍：
			在HTML文档中，每个元素都有盒子模型。
			由外到内分别为最外边距区域(margin area)，边框区域(border area)，内边距区域(padding area)和内容区域(content area)。
		margin(外边距):
			例:
			margin:10px 5px 15px 20px;
				上外边距是 10px
				右外边距是 5px
				下外边距是 15px
				左外边距是 20px
			margin:10px 5px 15px;
				上外边距是 10px
				右外边距和左外边距是 5px
				下外边距是 15px
			margin:10px 5px;
				上外边距和下外边距是 10px
				右外边距和左外边距是 5px
			margin:10px;
				所有 4 个外边距都是 10px