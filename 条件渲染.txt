v-if
	v-if 指令用于条件性地渲染一块内容。
	这块内容只会在指令的表达式返回 true值的时候被渲染。
	例：
		v-if="变量"
	v-else：
		v-else 添加一个“else 块”：
		例：
			<h1 v-if="awesome">Vue is awesome!</h1>
			<h1 v-else>Oh no</h1>
	v-else-if：
		例：
			<div v-if="type === 'A'">
			  A
			</div>
			<div v-else-if="type === 'B'">
			  B
			</div>
			<div v-else>
				Not A/B/C
			</div>
	template元素上使用 v-if ：
		<template> 元素上使用 v-if 条件渲染分组
		因为 v-if 是一个指令，所以必须将它添加到一个元素上。
		但是如果想切换多个元素，此时可以把一个 <template> 元素当做不可见的包裹元素，并在上面使用 v-if。
		最终的渲染结果将不包含 <template> 元素。
	用 key 管理可复用的元素：
		Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。
		但有时又要它们重新渲染，这时添加一个具有唯一值的 key 属性，Vue 将不在复用指定元素。
v-show
	另一个用于根据条件展示元素的选项是 v-show 指令。
	不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。!
	例：
		<h1 v-show="ok">Hello!</h1>
	注:
		v-show 不支持 <template> 元素，也不支持 v-else。
v-if vs v-show:
	v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。
	v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。
	相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。
	比较：
		一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。
		因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。
v-if 与 v-for 一起使用：
	不推荐同时使用 v-if 和 v-for。请查阅风格指南以获取更多信息。
	当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。