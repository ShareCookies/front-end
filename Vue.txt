安装：
	创建一个 .html 文件，在浏览器新标签页中打开它。
	然后通过如下方式引入 Vue：
		<!-- 开发环境版本，包含了有帮助的命令行警告 -->
		<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
声明式渲染
	Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统。
	例子：
		<div id="app">
		  {{ message }}
		</div>
		js：
			var app = new Vue({
			  el: '#app',
			  data: {
				message: 'Hello Vue!'
			  }
			})
			//app.message=111；//修改值。因为现在数据和 DOM 已经被建立了关联，所有东西都是响应式的。
		动态绑定的提示信息：
			 v-bind:title="变量"
	过渡效果:
		Vue 也提供一个强大的过渡效果系统，可以在 Vue 插入/更新/移除元素时自动应用过渡效果。
条件与循环：
	条件:
		v-if="" 控制元素是否显示相当于display:none;
	循环：
		v-for="value in 变量"
处理用户输入：
	为了让用户和你的应用进行交互，我们可以用 v-on 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法。
	v-on:click="方法"
	
	把信息输入表单：
		v-model 指令，它能轻松实现表单输入和应用状态之间的双向绑定。

注：
	vue.js使数据和 DOM 已经被建立了关联，所有东西都是响应式的。