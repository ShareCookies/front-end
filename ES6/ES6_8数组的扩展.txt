扩展运算符：
	扩展运算符（spread）是三个点（...）。
	扩展运算符可以展开数组，它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。
	扩展运算符（...）内部使用for...of循环
	例：
		console.log(...[1, 2, 3]);//就是把数组转为三个变量
		// 1 2 3
	特性：
		扩展运算符提供了复制数组的简便写法：
			const a1 = [1, 2];
			// 写法一
			const a2 = [...a1];
			// 写法二
			const [...a2] = a1;
		合并数组：
		与解构赋值结合：
		实现了 Iterator 接口的对象：
			任何定义了遍历器（Iterator）接口的对象（参阅 Iterator 一章），都可以用扩展运算符转为真正的数组。
Array.from()：
	Array.from方法用于将两类对象转为真正的数组：
	类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。
	类似数组的对象：
		所谓类似数组的对象，本质特征只有一点，即必须有length属性。
Array.of()
	Array.of方法用于将一组值，转换为数组。
数组实例的 copyWithin()：
	数组实例的copyWithin方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组。
数组实例的 find() 和 findIndex()
	数组实例的find方法，用于找出第一个符合条件的数组成员。
	数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。
数组实例的 fill()
	fill方法使用给定值，填充一个数组。
数组实例的 entries()，keys() 和 values()
	ES6 提供三个新的方法——entries()，keys()和values()——用于遍历数组。
	它们都返回一个遍历器对象（详见《Iterator》一章），
	可以用for...of循环进行遍历，唯一的区别是keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。
	例：
		for (let index of ['a', 'b'].keys()) {
		  console.log(index);
		}
		// 0
		// 1

		for (let elem of ['a', 'b'].values()) {
		  console.log(elem);
		}
		// 'a'
		// 'b'

		for (let [index, elem] of ['a', 'b'].entries()) {
		  console.log(index, elem);
		}
		// 0 "a"
		// 1 "b"
数组实例的 includes()
	Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。ES2016 引入了该方法。
数组实例的 flat()，flatMap() ：
数组的空位：
	数组的空位指，数组的某一个位置没有任何值。比如，Array构造函数返回的数组都是空位。
	空位不是undefined，空位是没有任何值。
	一个位置的值等于undefined，依然是有值的。
	in运算符可以说明这一点。？
	ES5 对空位的处理，已经很不一致了，大多数情况下会忽略空位。
	ES6 则是明确将空位转为undefined。


