前景：

Set介绍：
	ES6 提供了新的数据结构 Set。成员的值都是唯一的，没有重复的值。
Set例：
	1.Set本身是一个构造函数，用来生成 Set 数据结构：
		const s = new Set();
		[2, 3, 5, 4, 5, 2, 2].forEach(x => s.add(x));
		for (let i of s) {
		  console.log(i);
		}
		// 2 3 5 4
		解析：
			上面代码通过add()方法向 Set 结构加入成员，结果表明 Set 结构不会添加重复的值。
	2.Set函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。
Set 实例有以下属性：
	Set.prototype.constructor：构造函数，默认就是Set函数。
	Set.prototype.size：返回Set实例的成员总数。
Set 实例的方法：
	分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。
	四个操作方法：
		add(value)：添加某个值，返回 Set 结构本身。
		delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
		has(value)：返回一个布尔值，表示该值是否为Set的成员。
		clear()：清除所有成员，没有返回值。
	四个遍历方法：
		keys()：返回键名的遍历器
		values()：返回键值的遍历器
		entries()：返回键值对的遍历器
			例：
				for (let item of set.entries()) {
				  console.log(item);
				}
				// ["red", "red"]
				// ["green", "green"]
		forEach()：使用回调函数遍历每个成员
			Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。
			例：
				let set = new Set([1, 4, 9]);
				set.forEach((value, key) => console.log(key + ' : ' + value))
				// 1 : 1
				// 4 : 4
				// 9 : 9
				上面代码说明，forEach方法的参数就是一个处理函数。
				该函数的参数与数组的forEach一致，依次为键值、键名、集合本身（上例省略了该参数）。
				这里需要注意，Set 结构的键名就是键值（两者是同一个值）。

				另外，forEach方法还可以有第二个参数，表示绑定处理函数内部的this对象。？
Set遍历的应用：
	1.扩展运算符（...）内部使用for...of循环，所以也可以用于 Set 结构。
	2.使用 Set 可以很容易地实现并集（Union）、交集（Intersect）和差集。
	3.在遍历操作中，同步改变原来的 Set 结构：
		目前没有直接的方法，但有两种变通方法。
		一种是利用原 Set 结构映射出一个新的结构，然后赋值给原来的 Set 结构；另一种是利用Array.from方法。
WeakSet：
	WeakSet 结构与 Set 类似，也是不重复的值的集合。
	首先，WeakSet 的成员只能是对象，而不能是其他类型的值。

	WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用。
	也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。
	WeakSet运行前后很可能成员个数是不一样的，因此 ES6 规定 WeakSet 不可遍历。
Map：
	ES6 提供了 Map 数据结构，各种类型的值（包括对象）都可以当作键。
	js对象，也是键值对的集合，但是“键”的范围限于字符串。
	例：
		const m = new Map();const o = {p: 'Hello World'};
		m.set(o, 'content')
		m.get(o) // "content"
	特性：
		1.Map 构造函数也可以接受一个数组作为参数。
		例：
			const map = new Map([
			  ['name', '张三'],
			  ['title', 'Author']
			]);
			map.size // 2
			map.has('name') // true
			map.get('name') // "张三"
			map.has('title') // true
			map.get('title') // "Author"
		2.任何具有 Iterator 接口、且每个成员都是一个双元素的数组的数据结构都可以当作Map构造函数的参数。
			如Set和Map都可以用来生成新的 Map。
Map实例的属性：
	size属性：
		size属性返回 Map 结构的成员总数。
Map操作方法：
	set(key, value)：
		set方法设置键名key对应的键值为value，然后返回整个 Map 结构。
		如果key已经有值，则键值会被更新，否则就新生成该键。
		set方法返回的是当前的Map对象，因此可以采用链式写法。
			例：
				let map = new Map()
				  .set(1, 'a')
				  .set(2, 'b')
				  .set(3, 'c');
	get(key)：
		get方法读取key对应的键值，如果找不到key，返回undefined。
	has(key)：
		has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。
	delete(key)：
		delete方法删除某个键，返回true。如果删除失败，返回false。
	clear()：
		clear方法清除所有成员，没有返回值。
Map遍历方法：
	Map 结构原生提供三个遍历器生成函数和一个遍历方法。
	keys()：返回键名的遍历器。
	values()：返回键值的遍历器。
	entries()：返回所有成员的遍历器。
	例：
		for (let item of map.entries()) {
		  console.log(item[0], item[1]);
		}
		// "F" "no"
		// "T" "yes"
	forEach()：遍历 Map 的所有成员。
	注：
		Map 的遍历顺序就是插入顺序。、
		Map 结构的默认遍历器接口（Symbol.iterator属性），就是entries方法。
	Map 的遍历和过滤：
		结合数组的map方法、filter方法，可以实现 Map 的遍历和过滤（Map 本身没有map和filter方法）。
与其他数据结构的互相转换：
	1.Map 与数组
	2.Map 与对象
	3.Map 与JSON
WeakMap ：


