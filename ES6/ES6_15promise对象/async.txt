https://segmentfault.com/a/1190000007535316
async (异步 函数) ，而 await (async wait 异步等待)。

async 函数返回值：
	1. async 函数 返回  Promise 对象
	例：
		async function testAsync() {
			return "hello async";//如果在函数中 return 一个直接量，async 会把这个直接量通过 Promise.resolve() 封装成 Promise 对象。
		}

		const result = testAsync();
		console.log(result);
		附：
			如果async 函数没有返回值， 它会返回 Promise.resolve(undefined)。
	2. Promise 的特点——无等待，所以在没有 await 的情况下执行 async 函数，它会立即执行并返回一个 Promise 对象，并且绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。
await：
	https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await
	
	await  操作符用于等待一个表达式。它只能在异步函数 async function 中使用。
	
	语法
		[返回值] = await 表达式;
	表达式
		一个 Promise 对象或者任何要等待的值。
	返回值
		返回 Promise 对象的处理结果。如果等待的不是 Promise 对象，则返回该值本身。
		即：
			1. 如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。

			2. 如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，
			然后得到 resolve 的值，作为 await 表达式的运算结果。
			附：
				看到上面的阻塞一词，心慌了吧……放心，这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。
			例：
				function takeLongTime() {
					return new Promise(resolve => {
						setTimeout(() => resolve("long_time_value"), 1000);
					});
				}
				async function test() {
					const v = await takeLongTime();
					console.log(v);
					console.log(66);
				}
				test();		
			附：
				1. await 命令后面的 Promise 对象，运行结果可能是 rejected，所以最好把 await 命令放在 try...catch 代码块中。
附：
	async/await 的优势在于处理 then 链。
	
