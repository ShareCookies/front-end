原型对象Promise.prototype:
	...
	
Promise.prototype.then()：
	Promise 实例具有then方法，即then方法是定义在原型对象Promise.prototype上的。
	then方法的作用是为 Promise 实例添加状态改变时的回调函数。
	then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。？那then如何判断接收的promise中的状态了

	then方法返回的是一个新的Promise实例（注：不是原来那个Promise实例）。
	then的链式写法：
		因此可以采用链式写法，即then方法后面再调用另一个then方法。

		getJSON("/posts.json").then(function(json) {
		  return json.post;//如果这里没有return 一个promise对象的话，then会默认返回一个状态为resolved的promise对象。？
		}).then(function(post) {
		  //1.会根据前一个then的返回的promise对象，决定调用该then的那个回调函数参数。2.如果前一个then返回的Promise对象，有异步操作，则会等待异步操作结束后，才会执行该then。
		});

		采用链式的then，可以指定一组按照次序调用的回调函数。
		这时，前一个then的回调函数，有可能返回的还是一个Promise对象（即有异步操作），这时后一个then回调函数，就会等待该Promise对象的状态发生变化，才会被调用。

