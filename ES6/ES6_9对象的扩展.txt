属性的简洁表示法：
	ES6 允许直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。
	例：
		let birth = '2000/01/01';
		const Person = {
		  name: '张三',
		  //等同于birth: birth      结果 birth: "2000/01/01"
		  birth,
		  // 等同于hello: function ()...
		  hello() { console.log('我的名字是', this.name); }
		};
		
	属性的赋值器（setter）和取值器（getter）：？
		const cart = {
		  _wheels: 4,
		  get wheels () {
			return this._wheels;
		  },
		  set wheels (value) {
			if (value < this._wheels) {
			  throw new Error('数值太小了！');
			}
			this._wheels = value;
		  }
		}
属性名表达式
	ES6 允许字面量定义对象时，用方法二（表达式）作为对象的属性名，即把表达式放在方括号内。
	例：
		let propKey = 'foo';
		let obj = {
		  [propKey]: true,
		  ['a' + 'bc']: 123
		};
		属性名表达式与简洁表示法，不能同时使用，会报错。
	注：
		JavaScript 定义对象的属性，有两种方法。
		// 方法一
		obj.foo = true;
		// 方法二
		obj['a' + 'bc'] = 123;
方法的 name 属性：
	函数的name属性，返回函数名。对象方法也是函数，因此也有name属性。

属性的可枚举性：
	对象的每个属性都有一个描述对象（Descriptor），用来控制该属性的行为。
	Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。
	例：
		let obj = { foo: 123 };
		Object.getOwnPropertyDescriptor(obj, 'foo')
		//  {
		//    value: 123,
		//    writable: true,
		//    enumerable: true,
		//    configurable: true
		//  }
	目前，有四个操作会忽略enumerable为false的属性。
		for...in循环：只遍历对象自身的和继承的可枚举的属性。
		Object.keys()：返回对象自身的所有可枚举的属性的键名。
		JSON.stringify()：只串行化对象自身的可枚举的属性。
		Object.assign()： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。
		这四个操作之中，前三个是 ES5 就有的，最后一个Object.assign()是 ES6 新增的。
属性的遍历：
	ES6 一共有 5 种方法可以遍历对象的属性。
super 关键字：
	我们知道，this关键字总是指向函数所在的当前对象。
	ES6 又新增了另一个类似的关键字super，指向当前对象的原型对象。
	例：
		const proto = {
		  foo: 'hello'
		};

		const obj = {
		  foo: 'world',
		  find() {
			return super.foo;
		  }
		};

		Object.setPrototypeOf(obj, proto);
		obj.find() // "hello"
	特性：
		super关键字表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错：
		例：
			// 报错
			const obj = {
			  foo: super.foo
			}

			// 报错
			const obj = {
			  foo: () => super.foo
			}

			// 报错
			const obj = {
			  foo: function () {
				return super.foo
			  }
			}
			上面三种super的用法都会报错，因为对于 JavaScript 引擎来说，这里的super都没有用在对象的方法之中。
			第一种写法是super用在属性里面，第二种和第三种写法是super用在一个函数里面，然后赋值给foo属性。
			目前，只有对象方法的简写法可以让 JavaScript 引擎确认，定义的是对象的方法。
对象的扩展运算符：
	ES2018 将这个运算符引入了对象。
	... 为扩展运算符 
	
	例：
		let bar = { a: 1, b: 2 }; let baz = { ...bar }; // { a: 1, b: 2 } 
		上述方法实际上等价于： let bar = { a: 1, b: 2 }; let baz = Object.assign({}, bar); // { a: 1, b: 2 }
	注：
		源对象指针是被改变了
		！校验案例后续再看
	附：//源对象有的值会没掉
		let t = {a:1} ;let t2 = {b:3};
		t = {...t2}
		
	不想改变指针要以下方式：
		let t = {a:1} ;let t2 = {b:3};
		Object.assign(t, t2);
	
	附：
		https://www.jianshu.com/p/d5f572dd3776
		Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。
