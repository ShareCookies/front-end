获取对象的所有属性与方法：
	var content={
		classAttribute1 : 11,
		classAttribute2 : "qq",
		classAttribute3 : [1,"q"],
		classAttribute4 : function(){
			alert(11);
		}  
	}

	方式1：
		//遍历对象的所有属性与方法。
		for (var x in content){
			console.log(x);//获取属性的键
			console.log(content[x]);//获取对应属性的值
		}
	方式2：JSON.stringify(content);//把对象的所有属性，转换json格式变量。注：
	方式3：console.log(content);//调试出对象的所有属性与方法。注：调试推荐 


	
js类：
	prototype属性：https://www.cnblogs.com/douyage/p/8630529.html
	https://blog.csdn.net/wzp6010625/article/details/78470153
	https://www.cnblogs.com/libin-1/p/5911190.html
	介绍：
		JavaScript 是面向对象的语言，但js没有class关键字，即JS语言体系是没有直接存在类（Class）的概念。
		js中的类，是通过构造函数（constructor）和原型链（prototype chains）实现的，即js是模拟类的概念并使用它。
		注:
			ES2015新增class关键字，但实质上还是利用原型实现。



this关键字:
	介绍:
		this代表当前对象。
	this指错对象：
		在一个对象中进行多次this的调用，但某个时候this可能指向的已经不是我们本身的对象了，
		这时再在成员函数中调用this当然会出错了。
		解决方式:
			把this保存下来，以后用_this代替this，这样就不会出错了
	this指向谁,之对象中嵌套对象：
		介绍:
			this指向当前所在对象。
		例：
			var t={
				f : {
					fFirstValue : function(){
						console.log(this);
					},
					fSecondValue : 'fSecondValue'
					
				}
			}
			t.f.fFirstValue();//会输出f对象

创建对象:
	1、对象直接量 / 字面量（推荐）
		例：
			var obj = {
				name: 'lyl',
				age: 18
			}
		解析:
			定义类并实例化对象！

	2、构造函数：
		介绍：
			先自定义构造函数，再用new关键字操作函数来创建对象。			
			构造函数划分为两类：
				一种是使用系统已经定义好的构造函数来创建对象。
				一种是自定义构造函数然后创建对象。
		1.系统自带的构造函数：
			例：
				var obj = new Object();
				obj.name = 'lyl';
				console.log(obj.name); //lyl	
			系统自带的构造函数有：
				new Object(), Array(), Number(),Boolean(), Date()...
		2.自定义的构造函数：
			例:
			  function Obj (name) {
				  this.name = name;//公有属性
				  var  age = 18;//私有属性
			  }
			  var obj = new Obj('lyl');
			  console.log(obj.name); 
			注：
				1.funtion 的定义可以放在后面，因为function会自动提权！
				2.为了和普通函数区分，建议首字母大写，采用大驼峰式写法。普通函数采用小驼峰式写法。

			用new和不用new的区别:
				自定义函数，不用new，则Obj('lyl')就是一个函数的正常执行，没有返回值，默认返回undefined。
				而用new操作符后js引擎就会将该函数看作构造函数看待，经过内部的一系列隐士操作，返回值就是一个对象了。

	公有属性和私有属性:
		属性变量用var声明就是私有属性，this就是公有属性。
		
	公有方法和私有方法:
		可以将一个函数赋给类的一个属性变量，那么，这个属性变量就可以称为方法。
		例:
			var draw = function (){}//私有方法
			this .draw = function (){}//公有方法
			
			var user =new User('22');//实例化类
			user.account;//调用类的公有属性
			user.draw();//调用类的公有方法
	注：
		模拟构造函数:
			使用方式2构造函数，来创建类即可。
			那方式1了！
		静态属性与函数:
			公有属性和方法就能算静态属性和方法了吧！。
		
对象属性的访问：
	例：
		var obj=new Object();
		方式1：obj.name
		方式2：obj['name']
	类方法中访问属性:？
		x = ax; // 访问私有属性，直接写变量名即可。
		this .gx = ax; // 访问公有属性，需要在变量名前加上this.   

对象的增、删、改、查:
	介绍:
		该处增、删、改三种操作都只是针对当前对象的属性进行操作，而不会影响到当前对象的原型的属性。
	增：
		介绍：
			增添一个对象的属性，就是直接对该其进行赋值操作即可。
		例：
			var obj = {};
			console.log(obj.name); //undefined （不会报错）
			obj.name = 'lyl';//或obj['name']='lyl';
			console.log(obj.name); // lyl
		注：
			1.打印未添加的属性，浏览器不会报错，而是会打印出undefined
			2.为所有对象添加属性：
				介绍：
					给内置原型增加原型属性即为所有对象添加属性
				例：
					Object.prototype.clone = function(){};
	删、改、查:？
JS系统对象：
	Window：
		介绍：
			Window对象表示浏览器中打开的窗口或一个框架。
			如果文档包含框架（frame 或 iframe 标签），
			浏览器会为 HTML 文档创建一个 window 对象，并为每个框架创建一个额外的 window 对象。
		注：
			1.没有应用于 window 对象的公开标准。
			2.JS中,所有的表达式都在当前的环境中计算。
			要引用当前窗口无需要特殊的语法，
			例：
				可以只写 document，而不必写 window.document。
				同样可以把当前窗口对象的方法当作函数来使用，
				如只写 alert()，而不必写 Window.alert()。
				http://www.w3school.com.cn/jsref/dom_obj_window.asp
	Document：
		全称：
			HTML DOM Document 对象
		介绍：
			每个载入浏览器的 HTML 文档都会成为 Document 对象。
			Document 对象使我们可以从脚本中对 HTML 页面中的所有元素进行访问。
			提示：Document 对象是 Window 对象的一部分，可通过 window.document 属性对其进行访问。
			http://www.w3school.com.cn/jsref/dom_obj_document.asp
		注：
			js浏览器对象模型包含了文档对象模型dom(document)。