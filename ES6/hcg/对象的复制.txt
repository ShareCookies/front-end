引用传递：
	let obj1 = { a: 1, b: 2};
	let b = obj1;
	b.a=222222;
	console.log(obj1);//{a: 222222, b: 2}
	console.log(b);//{a: 222222, b: 2}
值传递：
	let obj1 = 111;
	let b = obj1;
	b=222222;
	console.log(obj1);//111
	console.log(b);//222222
浅拷贝：
	浅拷贝即拷贝对象的属性是对象的话，那么对子对象的属性进行修改的话，会影响到原来的对象。
	1. 扩展运算符
		https://blog.csdn.net/astonishqft/article/details/82899965
		let source = { a: 1, b: {c1:2} ,c:{c1:666}};
		let target = { ...source };
		console.log(source);
		target.a = 't1';//不影响源对象
		target.b = 2;
		target.c.c1 = 't3';//子对象的修改影响到源对像值
		console.log(target);
深拷贝：
	即使拷贝对象的属性是对象，对子对象的属性进行修改的话，不会影响到原来的对象。
	
附：
	1. 对象的合并
		https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
		Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。然后返回目标对象。
		const target = { a: 1, b: 2 };
		const source = { b: 4, c: 5 };
		const returnedTarget = Object.assign(target, source);
		console.log(target);
		// expected output: Object { a: 1, b: 4, c: 5 }
		console.log(returnedTarget);
		// expected output: Object { a: 1, b: 4, c: 5 }
