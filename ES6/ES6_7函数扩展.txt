函数参数的默认值：
	ES6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法。
	特性：
		参数默认值的位置：
			通常情况下，定义了默认值的参数，应该是函数的尾参数。
			如果非尾部的参数设置默认值，实际上这个参数是没法省略的（非尾部省略，要用undefined）。
		指定了默认值后，length属性将失真。
			length属性的含义是，该函数预期传入的参数个数。
			某个参数指定默认值以后，预期传入的参数个数就不包括这个参数了。
		作用域 :
			...
rest 参数:
	ES6 引入 rest 参数，用于获取函数的多余参数，这样就不需要使用arguments对象了。
	rest 参数将多余的参数放入数组中。
	例：
		function add(...values) {//形式为...变量名
		  let sum = 0;
		  for (var val of values) {
			sum += val;
		  }
		  return sum;
		}
		add(2, 5, 3) // 10
		上面代码的add函数是一个求和函数，利用 rest 参数，可以向该函数传入任意数目的参数。
严格模式：
	从 ES5 开始，函数内部可以设定为严格模式。
	ES2016 做了一点修改，规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。
	语法：
		function doSomething(a, b) {
		  'use strict';
		  // code
		}
函数的属性：
	函数的name属性，返回该函数的函数名。
箭头函数：
	ES6 允许使用“箭头”（=>）定义函数。
	例：
		var sum = (num1, num2) => { return num1 + num2; }
		由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。
		// 报错
		let getTempItem = id => { id: id, name: "Temp" };
		// 不报错
		let getTempItem = id => ({ id: id, name: "Temp" });
	箭头函数有几个使用注意点。
		1.函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。
***		this对象的指向是可变的，但是在箭头函数中，它是固定的。
		2.不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。
			构造函数是指 new Promise();//()就是构造函数
		3.不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。
		4.不可以使用yield命令，因此箭头函数不能用作 Generator 函数。
	不适用场合：
		由于箭头函数使得this从“动态”变成“静态”，下面两个场合不应该使用箭头函数。
		1.第一个场合是定义函数的方法，且该方法内部包括this：
			const cat = {
			  lives: 9,
			  jumps: () => {
				this.lives--;
			  }
			}
			解析：
				上面代码中，cat.jumps()方法是一个箭头函数，这是错误的。
				调用cat.jumps()时，
					如果jumps是普通函数不是箭头函数，则该方法内部的this指向cat；
					如果写jumps是例子中的箭头函数，则this指向全局对象，
					因此不会得到预期结果。
		2.第二个场合是需要动态this的时候，也不应使用箭头函数：
			var button = document.getElementById('press');
			button.addEventListener('click', () => {
			  this.classList.toggle('on');
			});
			上面代码运行时，点击按钮会报错。
			因为button的监听函数是一个箭头函数，导致里面的this就是全局对象。
			如果改成普通函数，this就会动态指向被点击的按钮对象。
	嵌套的箭头函数：
双冒号运算符：???
	函数绑定运算符是并排的两个冒号（::），双冒号左边是一个对象，右边是一个函数。
	该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右边的函数上面。
	
	如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面：
		
尾调用：
尾递归：
函数参数的尾逗号：
	ES2017 允许函数的最后一个参数有尾逗号（trailing comma）。
	此前，函数定义和调用时，都不允许最后一个参数后面出现逗号。
	function clownsEverywhere(
	  param1,
	  param2
	)