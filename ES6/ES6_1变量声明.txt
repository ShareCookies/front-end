http://es6.ruanyifeng.com/#docs/let
介绍：
	ES6 是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准。
	涵盖了 ES2015、ES2016等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。
	部署支持：
		各大浏览器的最新版本，对 ES6 的支持可以查看kangax.github.io/compat-table/es6/。
		随着时间的推移，支持度已经越来越高了，超过 90%的 ES6 语法特性都实现了。
	转码器：
		可以将 ES6 代码转为 ES5 代码，从而在所有环境执行。
		这意味着，你可以用 ES6 的方式编写程序，又不用担心现有环境是否支持。
		Babel 是一个广泛使用的 ES6 转码器。
变量：
	声明变量：
		介绍：
			ES6 一共有 6 种声明变量的方法。
			var命令和function命令。
			ES6 添加let和const命令，import命令和class命令。
		let：
			let所声明的变量，只在let命令所在的代码块内有效。
			for循环的计数器，就很合适使用let命令。
			例：
				1.for循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。
				for (let i = 0; i < 3; i++) {
				  let i = 'abc';
				  console.log(i);
				}
				// abc
				// abc
				// abc
			特性：
				无变量提升：
					let所声明的变量一定要在声明后使用，否则报ReferenceError错。
					注：
						var命令会发生“变量提升”现象，即变量可以在声明之前使用，值为undefined。
				暂时性死区：
					如果区块中存在let和const命令，从区块一开始就形成了封闭作用域。
					凡是在声明之前就使用这些变量，就会报错。
					 例：
						var tmp = 123;
						if (true) {
						  tmp = 'abc'; // ReferenceError
						  let tmp;
						}
					注：
						没有let之前，typeof运算符是百分之百安全的，永远不会报错。现在这一点不成立了。
						这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。
				不允许重复声明：
					let不允许在相同作用域内，重复声明同一个变量。
					例：
						var 声明过的不能在let声明：
							let a = 10;
							var a = 1;
						不能在函数内部重新声明参数。
							function func(arg) {
							  let arg;
							}
							func() // 报错
		var:
			var命令声明的，在全局范围内都有效，所以全局只有一个变量i。
		const:
			const声明一个只读的常量。一旦声明，常量的值就不能改变。
			特性：
				const一旦声明变量，就必须立即初始化,否则会报错。
				const的作用域只在声明所在的块级作用域内有效。
				const命令声明的常量也是不提升，同样存在暂时性死区。
				const常量与let一样不可重复声明。
			例：
				const message = "Goodbye!";
			注：
				1.：
					const实际上保证的是变量指向的那个内存地址所保存的数据不得改动。
					对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。
					但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针。
					因此，将一个对象声明为常量必须非常小心。因为指针指向的数据结构有可能变的。
					例：
						const foo = {};
						// 为 foo 添加一个属性，可以成功
						foo.prop = 123;
						foo.prop // 123
						// 将 foo 指向另一个对象，就会报错
						foo = {}; 
		块级作用域：
			ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。
			例：
				定义一个五层的块级作用域。外层作用域无法读取内层作用域的变量：
				{{{{
				  {let insane = 'Hello World'}
				  console.log(insane); // 报错
				}}}};
				内层作用域可以定义外层作用域的同名变量：
				{{{{
				  let insane = 'Hello World';
				  {let insane = 'Hello World'}
				}}}};
			ES6明确允许在块级作用域之中声明函数，在块级作用域之外不可引用:
				考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。
				如果确实需要，也应该写成函数表达式，而不是函数声明语句。
				// 函数声明语句
				{
				  let a = 'secret';
				  function f() {
					return a;
				  }
				}

				// 函数表达式
				{
				  let a = 'secret';
				  let f = function () {
					return a;
				  };
				}
	顶层对象：
		介绍：
			顶层对象，在浏览器环境指的是window对象，在 Node 指的是global对象。
		特性：
			1.顶层对象的属性是到处可以读写的。
			2.ES5 之中，顶层对象的属性与全局变量是等价的。
			例:
				var q=2;function test(){console.log(window.q);} test();
			3.ES6 中var命令和function命令声明的全局变量，依旧是顶层对象的属性；
			let、const、class命令声明的全局变量，不属于顶层对象的属性。
			例：
				let b = 1;
				window.b // undefined
		在所有情况下，都取到顶层对象：
			...