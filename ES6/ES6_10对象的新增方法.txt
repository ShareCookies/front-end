Object.is()
	ES5 比较两个值是否相等，只有两个运算符：相等运算符（==）和严格相等运算符（===）。
	它们都有缺点，前者会自动转换数据类型，后者的NaN不等于自身，以及+0等于-0。
	它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。
	例：
		Object.is('foo', 'foo')
		// true
		Object.is({}, {})
Object.assign()：
	Object.assign方法用于对象的合并。
	注：
		1.Object.assign方法实行的是浅拷贝，而不是深拷贝。
		也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。
		2.同名属性的替换
		3.数组的处理
		4.取值函数的处理
Object.getOwnPropertyDescriptors():
	ES5 的Object.getOwnPropertyDescriptor()方法会返回某个对象属性的描述对象（descriptor）。
	ES2017 引入了Object.getOwnPropertyDescriptors()方法，返回指定对象所有自身属性（非继承属性）的描述对象。
	
	该方法的引入目的，主要是为了解决Object.assign()无法正确拷贝get属性和set属性的问题:!
	例：
		...
__proto__属性:
Object.setPrototypeOf():
	Object.setPrototypeOf方法的作用与__proto__相同，用来设置一个对象的prototype对象，返回参数对象本身。
	它是 ES6 正式推荐的设置原型对象的方法。
	格式:
		const o = Object.setPrototypeOf(object, prototype)
Object.getPrototypeOf():
	该方法与Object.setPrototypeOf方法配套，用于读取一个对象的原型对象。

Object.keys()，Object.values()，Object.entries():
Object.fromEntries()
	Object.fromEntries()方法是Object.entries()的逆操作，用于将一个键值对数组转为对象。



