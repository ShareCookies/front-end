http://es6.ruanyifeng.com/#docs/module

前景：
	JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。
	
介绍：
	ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。
	一个模块就是一个独立的js文件，该文件内部的所有变量，外部无法获取。
	模块功能主要由两个命令构成：export和import。
	export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。
特性：
	ES6 的模块自动采用严格模式，不管你有没有在模块头部加上"use strict";。

	注：
		ES6 模块之中，顶层的this指向undefined，即不应该在顶层代码使用this。
		export、import命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错。
export 命令：
	export关键字输出模块的变量。
	例：
		下面是一个 JS 文件，里面使用export命令输出变量。
	export default 命令
		从前面的例子可以看出，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。
		为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到export default命令，为模块指定默认输出.
		例：
			// export-default.js
			export default function () {
			  console.log('foo');
			}
			其他模块加载该模块时，import命令可以为该匿名函数指定任意名字。
			需要注意的是，这时import命令后面，不使用大括号。
				// import-default.js
				import customName from './export-default';
				customName(); // 'foo'
			在一条import语句中，同时输入默认方法和其他接口：
				import _, { each, forEach } from 'lodash';
import 命令 :
	使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。
	特性：
		1.import命令输入的变量都是只读的，因为它的本质是输入接口。
			注：
				但是，如果变量是一个对象，改写对象的属性是允许的。
				这种写法很难查错，建议凡是输入的变量，都当作完全只读，轻易不要改变它的属性。
		2.import命令具有提升效果，会提升到整个模块的头部，首先执行。
		
	from关键字：
		1.from指定模块文件的位置，可以是相对路径，也可以是绝对路径，.js后缀可以省略。
			例：
				import {myMethod} from './util';
		2.如果只是模块名，不带有路径，那么必须有配置文件，告诉 JavaScript 引擎该模块的位置。
			例：
				import {myMethod} from 'util';
				上面代码中，util是模块文件名，由于不带有路径，必须通过配置，告诉引擎怎么取到这个模块。
	例子：
		parent.html
as关键字：
	为导入导出的变量取别名
模块的整体加载：
	整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。
	例：
		import * as circle from './circle';
		console.log('圆面积：' + circle.area(4));//这是调用circle模块，export出来的area函数
export 与 import 的复合写法：
	如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起。
模块的继承：
跨模块常量 ：
	const声明的常量只在当前代码块有效。
	设置跨模块的常量（即跨多个文件），或者说一个值要被多个模块共享：
import()函数:
	
html中使用module：？
	https://www.jianshu.com/p/f7db50cf956f
	http://www.cnblogs.com/sunshq/p/10076569.html