用 v-for 把一个数组对应为一组元素：
	v-for 指令需要使用 item in items 形式的特殊语法，
	items 是源数据数组，item 是数组元素迭代的别名。
	特性：
		1.在 v-for 块中，我们拥有对父作用域属性的完全访问权限。
		2.v-for 还支持一个可选的第二个参数为当前项的索引。
		例：
			<ul id="example-2">
			  <li v-for="(item, index) in items">
				{{ parentMessage }} - {{ index }} - {{ item.message }}
			  </li>
			</ul>
			var example2 = new Vue({
			  el: '#example-2',
			  data: {
				parentMessage: 'Parent',
				items: [
				  { message: 'Foo' },
				  { message: 'Bar' }
				]
			  }
			})
		3.用 of 替代 in 作为分隔符，因为它是最接近 JavaScript 迭代器的语法：
		<div v-for="item of items"></div>
一个对象的 v-for：
	一个对象的 v-for你也可以用 v-for 通过一个对象的属性来迭代。
	特性：
		1.会for对象的方法吗:
			方法当作属性写的话会当作字符串for出来，
			当作函数写vfor失效。
		2.你也可以提供第二个的参数为键名：
		<div v-for="(value, key) in object">
		  {{ key }}: {{ value }}
		</div>
		3.第三个参数为索引：
		<div v-for="(value, key, index) in object">
		  {{ index }}. {{ key }}: {{ value }}
		</div>
			0. firstName: John
			1. lastName: Doe
			2. age: 30
		注：
			在遍历对象时，是按 Object.keys() 的结果遍历，但是不能保证它的结果在不同的 JavaScript 引擎下是一致的。
Key：
	前景：
		Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。
		如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 
		而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。！
		注：
			这个默认的模式是高效的，但是只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出。
			建议尽可能在使用 v-for 时提供 key。
	介绍：
		给Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。
		理想的 key 值是每项都有的唯一 id。它的工作方式类似于一个属性，所以你需要用 v-bind 来绑定动态值：
		例：
			 采用了简写
			<div v-for="item in items" :key="item.id">
			  <!-- 内容 -->
			</div>
数组更新检测：
	变异方法：
		变异方法 (mutation method)，会改变被这些方法调用的原始数组。
		它们也将会触发视图更新。
	替换数组：
		不会改变原始数组，但总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组。
	注意事项：
		由于 JavaScript 的限制，Vue 不能检测以下变动的数组：
		1.当你利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue
		2.当你修改数组的长度时，例如：vm.items.length = newLength
对象更改检测注意事项：
	还是由于 JavaScript 的限制，Vue 不能检测对象属性的添加或删除。
	对于已经创建的实例，Vue 不能动态添加根级别的响应式属性。
	但是，可以使用 Vue.set(object, key, value) 方法向嵌套对象添加响应式属性。
显示过滤/排序结果：
	...
一段取值范围的 v-for:
v-for on a <template>:
	类似于 v-if，你也可以利用带有 v-for 的 <template> 渲染多个元素。
v-for with v-if
	1.当它们处于同一节点，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。
	当你想为仅有的一些项渲染节点时，这种优先级的机制会十分有用。
	2.而如果你的目的是有条件地跳过循环的执行，那么可以将 v-if 置于外层元素 (或 <template>)上。
一个组件的 v-for：
	1.在自定义组件里，你可以像任何普通元素一样用 v-for 。
	2.2.0+ 的版本里，当在组件中使用 v-for 时，key 现在是必须的。
	例：
		<my-component v-for="item in items" :key="item.id"></my-component>
	2.任何数据都不会被自动传递到组件里，因为组件有自己独立的作用域。
	为了把迭代数据传递到组件里，我们要用 props ：
		<my-component
		  v-for="(item, index) in items"
		  v-bind:item="item"
		  v-bind:index="index"
		  v-bind:key="item.id"
		></my-component>