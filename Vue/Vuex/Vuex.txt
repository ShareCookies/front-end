vuex官网文档：
	https://vuex.vuejs.org/zh/guide/getters.html
	https://github.com/vuejs/vuex
案例：
	* https://blog.csdn.net/jingtian678/article/details/81481075
Vuex 是什么：
	Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。	
	hcg：
		把一些数据交给vuex管理。
		进行数据获取
		进行数据修改，在修改之后，vue会为你的整个项目做更新 ...
		
	注：
		什么情况下应该使用 Vuex：
			虽然 Vuex 可以帮助我们管理共享状态，但也附带了更多的概念和框架。如果您的应用够简单，一个简单的 store 模式就足够您所需了。
			hcg：
				大中型项目中，很多时候都需要在不相关的平行组件之间传递数据.
				并且很多数据需要多个组件循环使用.
				这时就要使用vuex.
store（状态管理）:
	状态管理有5个核心，分别是state、getter、mutation、action以及module。
	state:
		https://vuex.vuejs.org/zh/guide/state.html
		state称为状态，即储存在store中的数据。
		获得state（状态）的两种方式：
			1.使用Vue.use(Vuex)，即在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中。
			该方式下获得状态：
				在子组件能直接通过 this.$store.state 访问到state。
			例：
				访问user ：this.$store.state.user
			2.在需要使用state的组件中导入store。
			该方式下获得状态：
				在子组件能直接通过 store.state.count 访问;
			注：
			1.在计算属性中使用状态，每当 store.state.count 变化的时候, 都会重新求取计算属性，并且触发更新相关联的 DOM。
	                2.使用 mapState 辅助函数帮助我们生成计算属性：
	                    mapState 函数返回的是一个对象。
	                    例：
	                        computed: {
	                          localComputed () { /* ... */ },
	                          // 使用对象展开运算符将此对象混入到外部对象中
	                          ...mapState([// 映射 this.count 为 store.state.count
	                              'count'
	                            ])
	                        }



	
	getter：
		getter可以认为是 store 的计算属性。
		就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。

		在 store 中定义getter：
			例：
				const store = new Vuex.Store({
				  state: {
					todos: [
					  { id: 1, text: '...', done: true },
					  { id: 2, text: '...', done: false }
					]
				  },
				  //Getter 接受 state 作为其第一个参数：
				  getters: {
					doneTodos: state => {
					  return state.todos.filter(todo => todo.done)
					}
				  }
				})
			注：
				Getter 也可以接受其他 getter 作为第二个参数：
		访问getter：
			Getter 会暴露为 store.getters 对象，你可以以属性的形式访问这些值：
				store.getters.doneTodos 
			注：
				通过方法访问：
					你也可以通过让 getter 返回一个函数，来实现给 getter 传参。
				mapGetters 辅助函数：
					使用mapGetters 辅助函数将对应state值 映射到局部计算属性中。
					对象展开运算符：
						mapState 函数返回的是一个对象。
						对象展开运算符将它与局部计算属性混合使用。
						computed: {
						  localComputed () { /* ... */ },
						  // 使用对象展开运算符将此对象混入到外部对象中
						  ...mapState({
							// ...
						  })
						}


	mutations：
		更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。
		例：
			const store = new Vuex.Store({
			  state: {
				count: 1
			  },
			  mutations: {
				//回调函数中进行状态的更改，并且它会接受 state 作为第一个参数。
				increment (state,n) {
				  // 变更状态
				  state.count += n;
				}
			  }
			})
			//通过commit提交事件类型，会触发mutation对应的 回调函数。
			//向 store.commit 传入额外的参数，即提交载荷。
			附：只能传一个参，所以大多数情况载荷应该是一个对象
			store.commit('increment', 10)
		注：
			Mutation 需遵守 Vue 的响应规则
				既然 Vuex 的 store 中的状态是响应式的，那么当我们变更状态时，监视状态的 Vue 组件也会自动更新。这也意味着 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项：

				1.最好提前在你的 store 中初始化好所有所需属性。

				2.当需要在对象上添加新属性时，你应该

					使用 Vue.set(obj, 'newProp', 123), 
					或者以新对象替换老对象。例如，利用对象展开运算符我们可以这样写：
					state.obj = { ...state.obj, newProp: 123 }
	Action 
		Action类似于 mutation，不同在于：
			Action 提交的是 mutation，而不是直接变更状态。
			Action 可以包含任意异步操作。

	Module
		Vuex 允许我们将 store 分割成模块（module）。
		每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割。



开始	

	每一个 Vuex 应用的核心就是 store（仓库）。
	“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)。
	Vuex 和单纯的全局对象有以下两点不同：

		1.Vuex 的状态存储是响应式的。
			当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。
		2.你不能直接改变 store 中的状态。
			改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。
			这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。

vuex如何管理状态：
	把组件的共享状态抽取出来，以一个全局单例模式管理。
	在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为。
vuex优势：
	任何组件都能获取状态或者触发行为。
	另外，通过定义和隔离状态管理中的各种概念并强制遵守一定的规则，我们的代码将会变得更结构化且易维护。
	
vuex 分多个文件:
	