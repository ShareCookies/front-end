
监听事件：
	可以用 v-on 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。
	
	语法：
		v-on:click=""
		1.可以把 JavaScript 代码写在 v-on 指令中。
		2.v-on 还可以接收一个需要调用的方法名称。
内联处理器中的方法：
	...
	有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法：
	例：
		<button v-on:click="warn('Form cannot be submitted yet.', $event)">
		  Submit
		</button>
		// ...
		methods: {
		  warn: function (message, event) {
			// 现在我们可以访问原生事件对象
			if (event) event.preventDefault()
			alert(message)
		  }
		}
事件修饰符：
	前景：
		在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。
		尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。
	介绍：
		Vue.js 为 v-on 提供了事件修饰符。修饰符是由点开头的指令后缀来表示的。
	...
按键修饰符:
	在监听键盘事件时，我们经常需要检查详细的按键。
	Vue 允许为 v-on 在监听键盘事件时添加按键修饰符。
	...
	按键码：
		keyCode 的事件用法已经被废弃了并可能不会被最新的浏览器支持
系统修饰键:
	...
	.exact 修饰符:
	鼠标按钮修饰符:
为什么在 HTML 中监听事件:
	你可能注意到这种事件监听的方式违背了关注点分离 (separation of concern) 这个长期以来的优良传统。
	但不必担心，因为所有的 Vue.js 事件处理方法和表达式都严格绑定在当前视图的 ViewModel 上，它不会导致任何维护上的困难。
	实际上，使用 v-on 有几个好处：
		1.扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。
		2.因为你无须在 JavaScript 里手动绑定事件，你的 ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试。
		3.当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何清理它们。


